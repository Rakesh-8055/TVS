{
	"name": "PL_Dec21",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "select *  from @{pipeline().parameters.tablename}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "SqlServerTable1",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_staging_data_dec21",
						"type": "DatasetReference",
						"parameters": {
							"tablename": {
								"value": "@pipeline().parameters.tablename",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "DF_Test1_Dec21",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "DF_Test_Dec21",
						"type": "DataFlowReference",
						"datasetParameters": {
							"sink1": {
								"tablename": {
									"value": "@pipeline().parameters.tablename",
									"type": "Expression"
								}
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					}
				}
			}
		],
		"parameters": {
			"tablename": {
				"type": "string",
				"defaultValue": "test1"
			}
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}